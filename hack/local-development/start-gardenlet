#!/bin/bash -e
#
# Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source $(dirname "${0}")/common/helpers
source $(dirname "${0}")/common/local-imagevector-overwrite

REPO_ROOT=$(dirname "${0}")/../..
DEV_DIR=$REPO_ROOT/dev
EXAMPLE_DIR=$REPO_ROOT/example

kubeconfig="$KUBECONFIG"

if [[ $(k8s_env) == "$NODELESS" ]]; then
  kubeconfig="$(dirname $0)/local-garden/kubeconfigs/gardenlet.conf"
else
  mktemp_kubeconfig
  kubeconfig="$__tmp_kubeconfig"
  trap cleanup_kubeconfig EXIT
fi

GARDEN_KUBECONFIG="${GARDEN_KUBECONFIG:-$kubeconfig}"
echo "$GARDEN_KUBECONFIG"
# determine the seed to manage; if multiple seeds exist on the
# garden, the SEED_NAME env variable must be set
if [ -n "${SEED_NAME:-}" ]; then
  seedConfig="$(kubectl --kubeconfig="$GARDEN_KUBECONFIG" get seed "$SEED_NAME" -o yaml)"
else
  seeds="$(kubectl --kubeconfig="$GARDEN_KUBECONFIG" get seeds -o yaml | yq eval '.items' -)"
  case $(echo "$seeds" | yq eval 'length' -) in
    0)
      echo "No seed found in garden cluster."
      exit 1
      ;;
    1)
      seedConfig="$(echo "$seeds" | yq eval '.[0]' -)"
      SEED_NAME="$(echo "$seedConfig" | yq eval '.metadata.name' -)"
      ;;
    *)
      names="$(echo "$seeds" | yq eval --tojson --indent 0 '[.[].metadata.name]' -)"
      echo "Multiple seeds exist in the garden, please specify \$SEED_NAME to select one of $names"
      exit 1
      ;;
  esac
fi
echo "get seed config"
# cleanup a bit to make the generated configuration file look a bit neater
tmpFile="$DEV_DIR/seed-$SEED_NAME.yaml"
echo "$seedConfig" | yq eval 'del(
  .apiVersion,
  .kind,
  .status,
  .metadata.annotations,
  .metadata.managedFields,
  .metadata.creationTimestamp,
  .metadata.finalizers,
  .metadata.generation,
  .metadata.resourceVersion,
  .metadata.uid
)' - > "$tmpFile"

# create seed-specific configuration file if it doesn't exist yet
configFile="$DEV_DIR/20-componentconfig-gardenlet-seed-$SEED_NAME.yaml"

if [ ! -f "$configFile" ]; then
  cp "$EXAMPLE_DIR/20-componentconfig-gardenlet.yaml" "$configFile"
fi

# update gardenlet config
yq eval-all --inplace 'select(fileIndex==0).seedConfig = select(fileIndex==1) | select(fileIndex==0)' "$configFile" "$tmpFile"

# fetch seed kubeconfig
if [ -z "${SEED_KUBECONFIG:-}" ]; then
  seedKubeconfigName="$(yq eval '.spec.secretRef.name' "$tmpFile")"
  seedKubeconfigNamespace="$(yq eval '.spec.secretRef.namespace' "$tmpFile")"
  SEED_KUBECONFIG="$DEV_DIR/gardenlet-seed-$SEED_NAME.conf"

  if [ -z "$seedKubeconfigName" ] || [ -z "$seedKubeconfigNamespace" ]; then
    echo "Seed $SEED_NAME does not have a .spec.secretRef with name and namespace set, pointing to a Secret"
    echo "containing the kubeconfig for that seed. Please either update your seed (see docs/development/local_setup.md)"
    echo "or provide the kubeconfig explicitly via the SEED_KUBECONFIG environment variable."
    exit 1
  fi

  kubectl --kubeconfig="$GARDEN_KUBECONFIG" --namespace "$seedKubeconfigNamespace" get secret "$seedKubeconfigName" -o yaml |
    yq eval '.data.kubeconfig' - |
    base64 -d > "$SEED_KUBECONFIG"
fi
echo "$SEED_KUBECONFIG"
# generate temporary chart values
GARDENLET_CHARTS_DIR=$REPO_ROOT/charts/gardener/gardenlet
GARDENLET_CHARTS_RUNTIME_DIR="$GARDENLET_CHARTS_DIR/charts/runtime"
tmpConfig="${configFile}.tmp"
gardenletChartValues="$DEV_DIR/gardenlet-charts-values.yaml"
yq eval 'del(.apiVersion, .kind)' "$configFile" |
  yq eval '{"config": .}' - > "$tmpConfig"
yq eval-all 'select(fi==0).global.gardenlet * select(fi==1)' "$GARDENLET_CHARTS_DIR/values.yaml" "$tmpConfig" |
  yq eval '{"global": {"gardenlet": . }}' - > "$gardenletChartValues"
rm -f "$tmpConfig"

# garden namespace is required for the gardenlet leader election, service account, roles and role bindings.
kubectl   --kubeconfig="$SEED_KUBECONFIG" get    namespace garden &>/dev/null || \
  kubectl --kubeconfig="$SEED_KUBECONFIG" create namespace garden

# apply RBAC resources in seed cluster
helm template gardenlet "$GARDENLET_CHARTS_RUNTIME_DIR" -f "$gardenletChartValues" |
  yq eval 'select(.apiVersion=="rbac.authorization.k8s.io/v1")' - |
  kubectl --kubeconfig="$SEED_KUBECONFIG" auth reconcile --remove-extra-permissions --remove-extra-subjects -f -
helm template gardenlet "$GARDENLET_CHARTS_RUNTIME_DIR" -s templates/serviceaccount.yaml -f "$gardenletChartValues" |
  kubectl --kubeconfig="$SEED_KUBECONFIG" apply -f -
rm -f "$gardenletChartValues"

# keep original seed kubeconfig as is
SEED_KUBECONFIG_GARDENLET_TOKEN="$DEV_DIR/gardenlet-seed-$SEED_NAME-token.conf"
cp "$SEED_KUBECONFIG" "$SEED_KUBECONFIG_GARDENLET_TOKEN"

# use the token of the gardenlet service account to authenticated against the seed API
token=$(kubectl --kubeconfig="$SEED_KUBECONFIG" --namespace garden get secret $(kubectl --kubeconfig="$SEED_KUBECONFIG" --namespace garden get serviceaccount gardenlet -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode)
user=$(kubectl --kubeconfig="$SEED_KUBECONFIG" config view --raw --minify -o json | yq eval '.["current-context"] as $currentContext | .contexts[] | select(.name == $currentContext) | .context.user' -)
USER_VALUE=$user TOKEN_VALUE=$token yq eval --inplace '.users = [{"name": strenv(USER_VALUE), "user": {"token": strenv(TOKEN_VALUE)}}]' $SEED_KUBECONFIG_GARDENLET_TOKEN

file_imagevector_overwrite="$(mktemp_imagevector_overwrite github.com/gardener/gardener "$REPO_ROOT" "$REPO_ROOT"/charts)"
if [ ! -f "$file_imagevector_overwrite" ]; then
  echo "failed to generate local image vector override: $file_imagevector_overwrite"
else
  trap cleanup_imagevector_overwrite EXIT

  echo "Starting gardenlet for seed $SEED_NAME..."

  #cp "${SEED_KUBECONFIG_GARDENLET_TOKEN}" "${DEV_DIR}/t_seed_kubeconfig_gardenlet_token.conf"
  #cp "$GARDEN_KUBECONFIG" "${DEV_DIR}/t_garden_kubeconfig.conf"
  #cp "$file_imagevector_overwrite" "${DEV_DIR}/t_imagevector_overwrite.yaml"
  #cp "$configFile" "${DEV_DIR}/t_gardenlet_configfile.yaml"
  #exit 1
  configFile="/Users/i058544/go/src/github.com/gardener/gardener/dev/t_gardenlet_configfile.yaml"
  #KUBECONFIG="${SEED_KUBECONFIG_GARDENLET_TOKEN}" \
  #GARDEN_KUBECONFIG="$GARDEN_KUBECONFIG" \
  #IMAGEVECTOR_OVERWRITE="$file_imagevector_overwrite" \
  KUBECONFIG="/Users/i058544/go/src/github.com/gardener/gardener/dev/t_seed_kubeconfig_gardenlet_token.conf" \
  GARDEN_KUBECONFIG="/Users/i058544/go/src/github.com/gardener/gardener/dev/t_garden_kubeconfig.conf" \
  IMAGEVECTOR_OVERWRITE="/Users/i058544/go/src/github.com/gardener/gardener/dev/t_gardenlet_image_vector_all.json" \
  IMAGEVECTOR_OVERWRITE_COMPONENTS="/Users/i058544/go/src/github.com/gardener/gardener/dev/t_gardenlet_image_vector_all_component.yaml" \
  GO111MODULE=on \
      go run \
        -mod=vendor \
        -ldflags "$("$(dirname $0)"/../get-build-ld-flags.sh)" \
        "$REPO_ROOT/cmd/gardenlet/main.go" \
        --config="$configFile"
fi
